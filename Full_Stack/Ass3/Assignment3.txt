
*****Type Annotation*******

We know that JavaScript is not a typed language so we cannot specify the type of a variable 
such as a number, string, Boolean in JavaScript. However, in TypeScript, we can specify the 
type of variables, function parameters, and object properties because TypeScript is a typed language.

We can specify the type by using a colon(: Type) after a variable name, parameter, or property. 
The following example demonstrates type annotations for variables with different data types.

    var age: number = 44;          // number variable  
    var name: string = "Rahul";     // string variable  
    var isUpdated: boolean = true; // Boolean variable   

The below example demonstrates the type annotation with parameters.
Example

    function display(id:number, name:string)  
    {  
        console.log("Id = " + id + ", Name = " + name);  
    }  
    display(101, "Rohit Sharma");  


******Type Assertion***********

In TypeScript, type assertion is a mechanism which tells the compiler about the type of a variable. 
When TypeScript determines that the assignment is invalid, then we have an option to override the type using a type assertion. 
If we use a type assertion, the assignment is always valid, so we need to be sure that we are right. Otherwise, our program may not work correctly.

Type assertion is explicitly telling the compiler that we want to treat the entity as a different type. 
It allows us to treat any as a number, or number as a string. 
Type assertion is commonly used when we are migrating over code from JavaScript to TypeScript.
Type assertion works like typecasting, but it does not perform type checking or restructuring of data just like other languages can do like C# and Java. 
Example:::::
    let empCode: any = 111;   
    let employeeCode = <number> code;   
    console.log(typeof(employeeCode)); //Output: number 
 
TypeScript provides two ways to do Type Assertion. They are

    1)Using Angular Bracket <>
    let empCode: any = 111;   
    let employeeCode = <number> code;   

    2)Using as keyword
     let empCode: any = 111;   
     let employeeCode = code as number; 

Type Assertion with object:
interface Student {   
    name: string;   
    code: number;   
}  
let student = <Student> { };   
student.name = "Rohit"; // Correct  
student.code = 123; // Correct 


Note: use Assertion and Annotation in program respectively. 
commands: tsc fileName.ts  >>>for Compailer
          node fileName.js    >>>>for Output
also you can use "node fileName.ts" for the some example.


Assignment Questions:

1) Write a TypeScript program that declares a variable `name` and assigns it a string value. Also declare a variable `age` and assign it a number value. 
Finally print the values of name and age.


2)Write a TypeScript program that declares variables using let, const, and var. Then, describe how each declaration type behaves with respect to scoping and mutability.

3)   Write a TypeScript program that converts a variable of one type to another 
using type assertions and type conversion functions like parseInt().

4)Write a TypeScript program that defines an enumeration 'Color' with values 'Red', 'Green', 'White' and Blue. 
Create a variable 'selectedColor' of type 'Color' and assign it one of the enumeration values.

5)Write a TypeScript generic function that accepts two arguments: an array of any type and two indices. 
The function should swap the elements at the specified indices and return the modified array.

6)Write a TypeScript class called Bus with the properties make, model, and year. 
Implement a constructor that initializes these properties when a Bus object is created.

7) Write a TypeScript class that defines a base class Car with properties like make, model, and year, 
along with a start() method that prints a starting message. Now create a class called Engine with the properties 
horsepower and fuelType. Modify the Car class to include an instance of the Engine class as a property. 
Implement a method printCarDetails() in the Car class that prints both car and engine details.

8)Write a TypeScript module that exports a class called Student with properties name and age. Import the Student class in another TypeScript file, create instances of Student, and display their information.

9)Write a TypeScript module that exports multiple functions and variables using named exports. Import specific named exports in a separate TypeScript file and use them.

10)Write a TypeScript module that exports a default function or class. 
Import the default export into another TypeScript file and use it to perform a task or create an instance.
main.ts


11)Write two TypeScript modules that import from each other, creating a circular dependency. 
Show how TypeScript handles circular dependencies and uses the imported functions or classes.

12) create an interface OS with properties name and language of string type.
  define a function with one argument, which is the type of interface OS
output: Android O has Java Language.


13)  Create a class Logger with a method log that logs a message to the console.
    Write a decorator logMethod that logs the method name and its parameters before invoking the method.
    Apply this decorator to the log method of the Logger class.


14)  Write a function printShapeInfo(shape: Circle | Rectangle) that prints the area of the shape.
    Use type narrowing to determine whether shape is a Circle or Rectangle.
    Use type guards to safely access the properties specific to each shape type.(take user input)

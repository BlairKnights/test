Question Bank(each question carry 5marks.)

React

1)Describe the process of setting up the environment for React.js development.
2)Explain the importance of Form Validation in React.Js forms.
3)Discuss the use of properties (props) in React.Js components.
4)Define Shipping Details and Delivery Details. Discuss the Shipping Details and 
   Delivery Details steps in a form wizard in React.js
5)Explain the steps to set up a React application for handling forms and Discuss 
  the necessary dependencies and configuration needed to get started.
6)Discuss the different lifecycle phases of a React component and the lifecycle 
  methods associated with each phase in React.js.
7)Explain the difference between Props and State in React.js with examples.
8)Describe the steps involved in setting up a React.Js application for handling forms.
9)Explain the role of DOM events of React.js in traditional web development.
10)Describe a detailed example of a stateful TextArea component in React.js.
11)Describe the pros and cons of React.js.
Node

11)Describe the types of modules in Node.js.
12)Explain the role of npm in Node.js development.
13)Explain the role of web sockets in Node.js applications.
14)Define streams in Node.js and explain how they differ from traditional I/O operations.
15)Discuss the role of modules in Node.js. Explain how to create and use modules in a Node.js application. 
16)Explain the purpose of the npm init command and write steps to initialize a new Node.js project. 
   Create a simple Node.js script that prints "Hello, World!" to the console. 
17)Explain the event-driven architecture of Node.js
18)Discuss the importance of streams and buffers in Node.js. Provide examples of scenarios where streams and buffers are used.
19)Explain the concept of callbacks in Node.js. Provide examples demonstrating the use of callbacks in asynchronous functions. 
20)How does Node.js connect to databases? Explain different methods or libraries available for connecting Node.js to databases, citing examples

Typescript

21)Differentiate between "let" and "var" in TypeScript. Give appropriate examples to illustrate your points.
22)Explain the concept of decorators in TypeScript.
23)Explain the concept of Type Annotations and Assertion in TypeScript and also state their importance.
24)Describe the  interfaces in TypeScript.Give an example of defining and implementing an interface in TypeScript code
25)Discuss the benefits of using TypeScript over JavaScript in web development projects.
26)Define generics in TypeScript. Discuss how generics provide a way to create reusable, type-safe functions and data structures.
27)Discuss the significance of enums in TypeScript.


28)Explain the concept of basic types in TypeScript. Provide examples of primitive data types such as number, string, boolean, and null. Discuss their significance and usage in TypeScript code.

Bootstrap and ES6

29)Describe the  arrow functions in ES6. Implement a function convertToUpperCase using arrow function syntax that takes an array of strings as input and returns a new array with each string converted to uppercase.(use map method).
30)Describe the MERN stack with  each component.
31)Explain Bootstrap Components.
Breadcrumb
Popover
Dropdowns
Progress Bar
Form 

32)Explain the principles of classes, inheritance, encapsulation, and polymorphism of object-oriented programming (OOP) in ES6.
33)Define and explain the concept of functional programming using JavaScript.
34)Define symbols, iterators/generators, and map/set in JavaScript.
35)Explain promises, async/await, callbacks, and generators in JavaScript asynchronous programming.
36)Discuss the spread syntax in ES6. Provide an example demonstrating its usage to merge arrays or objects.
37)Describe immutable data structures and their significance in functional programming. Provide an example illustrating 
   the use of immutable data structures in JavaScript.
38)Explanation of Map as a collection of key-value pairs and Set as a collection of unique values.
39)Mention of methods for adding, removing, and iterating over elements in both Map and Set.
40)Explain the difference between Bootstrap Components and Bootstrap Advance Components. Provide examples of each type and discuss their respective use cases. 
41)Discuss the significance of Bootstrap Utilities in web development. Provide examples of commonly used utilities and explain how they contribute to creating responsive and visually appealing websites. 
42)Define and explain the concept of functional programming. Discuss the characteristics of pure functions, higher-order functions, currying, and immutable data structures, providing examples where applicable.



Metric Plan:
A metric plan is a document that outlines what data will be collected and analyzed during the project, and used to get insights.
It defines how the project's success will be measured.

Roles and Responsibilities:
Stakeholding: Provides high-level support for the metrics program and champions its use within the organization.
Project Management: Leads the development of the plan, ensures alignment with project goals, and oversees its implementation.
Developing: Gathers accurate and reliable data using designated tools and processes.
Analyzing: Analyzes collected data, identifies trends and patterns, and provides insights to decision-makers.

Analyzing Software Data in Software Metrics:
Analysing software data in metrics means studying the information collected during development. 
This process helps uncover trends and patterns, such as rising complexity or defect rates. 
This helps development teams to make data-driven decisions to improve software quality and efficiency.

Software Metrics:
Software metrics are quantifiable measures that track aspects like code quality, development progress, and team performance.
Scope:
It provides a data-driven view throughout the project lifecycle to make informed decisions about resource allocation, 
risk mitigation, and overall project success.

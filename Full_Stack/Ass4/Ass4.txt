1)On NPM
	a) Install the lodash package globally using npm. Include the command used for installation.
	b) Create a new directory named npm-demo and initialize it as an npm package. Provide the command used for initialization.
	c) Install the express package as a dependency for the npm-demo package. Include the command used for installation.
	d) Verify the installed packages in the npm-demo directory. Provide
	 the command used for verification.

2)On Module
	a) Create a new module file named math.js that exports two functions: add and subtract. 
	   Implement each function to perform addition and subtraction of two numbers, respectively.
	b) Create a new file named app.js and import the math module. 
	   Use the add and subtract functions to perform arithmetic operations and display the results in the console.

3)callback
	a) Write an asynchronous function named delayedMessage that takes a callback function as an argument. Inside the function, use setTimeout to 	 delay execution for 2 seconds, then invoke the callback function with the message "Delayed message".
	b) Call the delayedMessage function and provide a callback function to handle the delayed message. Display the received message in the console.

4)Event Handling
	a) Create an event emitter instance and define an event named greet. 
	Implement a listener for the greet event that prints "Hello, Event!" to the console.
	b) Emit the greet event and observe the output in the console.

5)Streams and buffers
	a) Create a readable stream to read data from a text file named data.txt. 
	Use the fs module to create the stream.
	b) Implement event listeners for the data and end events of the stream. 
	Display the received data and a message indicating the end of the stream in the console.


6)Web Sockets
	a) Create a WebSocket server using the ws module. 
	  Define a callback function to handle client connections 
	  and implement event listeners for message reception and disconnection.
	b) Create a WebSocket client to connect to the server and send a message. 
	   Provide the code for establishing the connection and sending a message.
	c) Verify the communication between the WebSocket server 
	   and client by observing the messages exchanged in the console.
